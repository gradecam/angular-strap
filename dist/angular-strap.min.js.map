{"version":3,"sources":["angular-strap.js","timepicker/timepicker.js","helpers/compiler.js","dropdown/dropdown.js","typeahead/typeahead.js","tooltip/tooltip.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","modal/modal.js","datepicker/datepicker.js","collapse/collapse.js","affix/affix.js","aside/aside.js","button/button.js","alert/alert.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","$tooltip","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","index","$moveIndex","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$isBuilt","$render","keep","$timeout","Date","setHours","setMinutes","setSeconds","$setViewValue","hide","midIndex","parseInt","hours","push","disabled","label","selected","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","isTouch","$onKeyDown","test","keyCode","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","$element","blur","directive","$options","require","restrict","$window","navigator","userAgent","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","isDefined","$eval","bsKey","timepicker","newValue","oldValue","$watch","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","ngModel","update","timezoneOffsetAdjust","$formatters","modelValue","NaN","parse","$on","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","$resetMatches","$rootScope","$$rAF","$matches","$$postDigest","$scope","activate","$activeIndex","$select","matches","$isVisible","safeDigest","$emit","prefixEvent","onSelect","isFunction","equals","$$phase","$root","TypeaheadFactory","array","$filter","expression","results","postLink","charAt","toUpperCase","slice","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","ss","val","sd","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","on","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","setOffset","using","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","dataTarget","hasOwnProperty","$observe","bsTooltip","setViewport","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","backdropElement","modalElement","preventHideOnDialogMouseDown","unbindBackdropEvents","hideOnBackdropClick","preventEventDefault","backdropMouseDown","currentTarget","destroyModalElement","modalScope","$show","bottom","z-index","backdropBaseZindex","defaultPrevented","customClass","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","inlineStyles","AffixFactory","$affix","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option","AsideFactory","$aside","bsAside","aside","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","bind","toggleEvent","toggleClass","v","duration","dismissable","AlertFactory","$alert","bsAlert","alert"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var backdropMouseDown = false;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.on('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.on('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.off('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.off('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function preventHideOnDialogMouseDown(evt) {\n          if (evt.target === evt.currentTarget) {\n            backdropMouseDown = true;\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else if (backdropMouseDown) {\n            $modal.hide();\n          }\n          backdropMouseDown = false;\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var backdropMouseDown = false;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.on('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.on('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.off('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.off('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function preventHideOnDialogMouseDown(evt) {\n          if (evt.target === evt.currentTarget) {\n            backdropMouseDown = true;\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else if (backdropMouseDown) {\n            $modal.hide();\n          }\n          backdropMouseDown = false;\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}