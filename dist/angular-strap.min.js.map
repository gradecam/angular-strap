{"version":3,"sources":["angular-strap.js","tooltip/tooltip.js","helpers/compiler.js","collapse/collapse.js","typeahead/typeahead.js","timepicker/timepicker.js","tab/tab.js","select/select.js","navbar/navbar.js","scrollspy/scrollspy.js","popover/popover.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","provider","defaults","animation","disallowToggle","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","target","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","delta","getViewportAdjustedDelta","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","isNative","tooltip","transclusion","falseValueRegExp","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$matches","activate","$activeIndex","select","index","$select","matches","$isVisible","update","$render","onSelect","$setViewValue","equals","$onMouseDown","keyCode","$onKeyDown","TypeaheadFactory","array","$filter","expression","results","postLink","require","charAt","toUpperCase","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","$document","spies","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","backdropElement","modalElement","preventHideOnDialogMouseDown","unbindBackdropEvents","hideOnBackdropClick","preventEventDefault","backdropMouseDown","currentTarget","destroyModalElement","modalScope","$show","bottom","z-index","backdropBaseZindex","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","offsetWidth","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","bind","toggleEvent","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          /*****************************************************************************************\n           * BLOVE 2020-08-06: removed this from GradeCam's custom build because\n           * \"exotically placed\" datepickers (bottom-left) were flying off the bottom\n           * of the screen frequently, esp. on small devices. By letting it continue,\n           * this proceeds to calculate the viewport width and adjust the top position\n           * to keep the bottom on-screen.\n           * The primary side effect we have noticed so far is that it allows these\n           * tooltips / datepickres to pop up and mask the element they are anchored\n           * to, which seems like an acceptable compromise.\n           ****************************************************************************************/\n          // if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var backdropMouseDown = false;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.on('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.on('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.off('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.off('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function preventHideOnDialogMouseDown(evt) {\n          if (evt.target === evt.currentTarget) {\n            backdropMouseDown = true;\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else if (backdropMouseDown) {\n            $modal.hide();\n          }\n          backdropMouseDown = false;\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          /*****************************************************************************************\n           * BLOVE 2020-08-06: removed this from GradeCam's custom build because\n           * \"exotically placed\" datepickers (bottom-left) were flying off the bottom\n           * of the screen frequently, esp. on small devices. By letting it continue,\n           * this proceeds to calculate the viewport width and adjust the top position\n           * to keep the bottom on-screen.\n           * The primary side effect we have noticed so far is that it allows these\n           * tooltips / datepickres to pop up and mask the element they are anchored\n           * to, which seems like an acceptable compromise.\n           ****************************************************************************************/\n          // if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var backdropMouseDown = false;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.on('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.on('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            if (options.backdrop !== 'static') {\n              modalElement.off('mousedown', preventHideOnDialogMouseDown);\n              backdropElement.off('mousedown', preventHideOnDialogMouseDown);\n            }\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function preventHideOnDialogMouseDown(evt) {\n          if (evt.target === evt.currentTarget) {\n            backdropMouseDown = true;\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else if (backdropMouseDown) {\n            $modal.hide();\n          }\n          backdropMouseDown = false;\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}