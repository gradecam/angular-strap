{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","compile","options","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","scope","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","element","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","delta","getViewportAdjustedDelta","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","stopPropagation","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isNative","isString","tooltip","transclusion","falseValueRegExp","key","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"AAOA,YAEAA,SAGMC,OAAQ,0BAAA,sBAAA,sCAAAC,SAAA,WAAA,WAFZ,GAGIC,GAAWC,KAAAC,UACXC,UAAAA,UACAC,YAAU,GACVC,YAAAA,UACAC,YAAS,UACTC,WAAU,EACVC,QAAM,EACNC,UAAM,MACNC,YAAO,2BACPC,SAAM,GACNC,eAAO,EACPC,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,GAFFN,KAGIO,GAFJN,MAGIO,EAFJN,WAAW,EACXC,WAAW,EAKXb,yBAAK,EAEHe,0BAAe,EACfC,UACAC,SAAYrB,OAEZsB,QAASC,GAHbnB,MASMoB,MAAIC,UAAUC,aAAoBC,cAAYC,KAAQC,iBAAAA,QAAAA,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAL1D,QAUUC,GAAgBf,EAAMe,GA8I9B,QA0EIC,KACAC,EAAAA,MAAAA,EAAaC,YAAA,QAAAP,GACb1B,QAAK6B,UAAQd,EAAUc,SAAcK,QAAMC,WAAAN,EAAAO,SACzCP,EAAOH,OAAAA,GAnCb,QA8FQW,KAQNX,GArGAY,EAAMC,MAAMV,EAAQI,YAAc,QAASP,GAiGvCc,QAAAA,UAAAA,EAAAA,SAAAA,QAAAA,WAAAA,EAAAA,SA/FFX,EAAQY,OAAOf,GAmGjBA,IAAkBgB,EAAUC,CAC1B,GAAIA,GAAK,UAAAd,EAAApB,QAAEkC,MAAIC,GAAAA,GAAAA,MACfJ,MAjBJ,QAyHQK,KAxHN,GAyHMC,GAAIC,EAAatC,QAAAqB,MAAYrB,IAxHnCT,SAyHQ6C,QAAQG,EAAGC,SAAUxC,GAxHX,UAAZA,GAAmC,gBAAZA,EACzBoC,EAAQG,GAAGvC,EAASiB,EAASwB,QACR,WAAZzC,IACToC,EAAQG,GAAe,UAAZvC,EAAsB,aAAe,QAASiB,EAASyB,OA2HtEN,EAASO,GAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACQvB,WAAXiB,GAAiC,UAANhB,GAC1Be,EAAQC,GAAAA,EAASO,aAAc,YAAA3B,EAAA4B,6BArHxC,QA0HQT,KAxHN,IA0HM,GADAA,GAAQU,EAAI9C,QAAYqB,MAAA,KACpBiB,EAAAA,EAAaM,OAAAG,KAAY/C,CAzHjC,GA0HMoC,GAAQU,EAAIN,EAzHF,WAAZxC,GAAmC,gBAAZA,EACzBoC,EAAQU,IAAI9C,EAASiB,EAASwB,QACT,WAAZzC,IACToC,EAAQU,IAAgB,UAAZ9C,EAAsB,aAAe,QAASiB,EAASyB,OA4HvEN,EAASY,IAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACKhD,WAARoB,GAA6B,UAAApB,GAC/BiD,EAAWV,IAAGC,EAASvB,aAASiC,YAAAA,EAAAA,4BAMpC,QAASC,KACiB,UAApB/B,EAAQpB,QACViD,EAAWH,GAAAA,QAAI7B,EAASA,UAExBmB,EAAQU,GAAAA,QAAI7B,EAASA,eAIzB,QAAImC,KACKC,UAATjC,EAASiC,QAGPC,EAASR,IAAA,QAAA7B,EAAAiC,UAKPK,EAAMhB,IAAG,QAAStB,EAASQ,eAM/B,QAAS+B,KACPF,EAAIF,WACFH,EAAWH,GAAAA,QAAIW,GACfF,EAAMT,GAAAA,QAAI7B,EAASA,MACnBmC,GAAyB,GAnI1B,GAAG,GAuIN,QAASK,KACPC,IApIAT,EAAWH,IAAI,QAASW,GAyI1BF,EAASI,IAAAA,QAAaC,EAAAA,MACpBA,GAAwBxC,GArI5B,QA0IQyC,GAAYC,GAChBJ,EAAIK,kBAxIR,QA+IWC,GAAYA,GA9IrBJ,EAAWA,GAAaxC,EAAQ5B,QAAU4C,CAkJxC,IAAI2B,GAAKE,EAAAA,GAEPF,EAA0BA,SAAnBxE,EAAAA,QAA0B0E,EAAOJ,EAAAA,wBAA4BK,IA/IxE,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,EAgJa,QAALG,EAAKF,QAAGG,EAAM7E,QAAA8E,UAAAN,GAAKO,MAAAA,EAAWC,MAAOC,EAAAA,KAC1DC,OAAAA,EAAAA,OAAAA,EAAAA,MACJ,IAAIC,GAAAA,GAAsBT,IAAAA,EAA6CC,KAAAA,GAA+BI,EAAAC,OAAAC,GAEtGC,GAvIAA,OAAQE,EAASC,SAASC,gBAAgBC,WAAaF,SAASG,KAAKD,UAAYlB,EAASoB,KAAK,cAAgB,GA2I3GT,EAAAA,GACJN,MAAI5C,SAAQ3B,gBAAgBuF,YAE5Bf,OAAQ7C,EAAM6D,aACZ,IAzIJ,OA0IMX,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GAxIR,QA0IUH,GAAsBe,EAASlB,EAAAA,EAAAA,GAzIvC,GAAIM,GA2IElD,EAAA3B,EAAA2B,MAAA,IAzIN,QAAQA,EAAM,IA0IV,IAAK,QACHkD,GACEJ,IAAKgB,EAAShB,IAAMgB,EAASjB,OAAAA,EAAAA,EAAAA,EAC7BE,KAAMe,EAASf,KAAOe,EAASlB,MAEjC,MACF,KAAK,SACHM,GACEJ,IAAKgB,EAAShB,IAAMgB,EAASjB,OAC7BE,KAAMe,EAASf,KAAOgB,EAAAA,MAAAA,EAAAA,EAAAA,EAExB,MACF,KAAA,OACEb,GACEJ,IAAKgB,EAAShB,IAAMkB,EAAAA,OAAAA,EAAAA,EAAAA,EACpBjB,KAAMe,EAASf,KAAOe,EAExB,MAGJ,SACEZ,GAvIAJ,IAAKgB,EAAShB,IAAMkB,EA2IlBhE,KAAM8D,EAAOf,KAAS/C,EAAM4C,MAAO,EAAAmB,EAAU,GAtInD,IA0IQ/D,EAAA,GAzIN,MAAOkD,EAET,IAyIeH,QAAPG,EAAAA,IAA8BY,WAAhBA,EAASf,GAxI7B,OAyIM/C,EAAA,IAxIL,IAAK,OAyIFkD,EAAAH,KAAAe,EAAAf,IACE,MAtIL,KAwIM,QACLG,EAAQlD,KAAM8D,EAAAf,KAAAe,EAAAlB,MAAAmB,MAKVb,IAAaY,SAANhB,EAAMgB,IAAShB,UAAAA,EAAAA,GAtI5B,OAuIM9C,EAAA,IAtIL,IAAK,MAuIFkD,EAAAJ,IAAAgB,EAAAhB,IAAAkB,EAAAF,EAAAjB,MACE,MApIL,KAAK,SAwINK,EAAOA,IAAAA,EAAAA,IAUP,MAAIe,GAxIR,QA4IQC,GAAMD,EAAaA,GAEvBf,GAAAA,GAAOJ,EAAaA,GACpBI,EAAOH,EAAOG,YAIdD,EAAWkB,EAAAA,aACTC,EAAOC,SAAUC,EAAAA,IAAAA,EAAAA,cAAAA,IACf1C,EAAW2C,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GA/IbL,OAgJIpB,KAAgBwB,EAAMxB,GA/I1BoB,MAgJInB,KAAiBuB,EAAMvB,GA/I/BG,EAgJQsB,IAAOtB,EAAAJ,IAAA2B,EA/IfvB,EAAOH,KAAOG,EAAOH,KAAOkB,EAC5BhB,EAAWkB,UAAUO,EAAKxG,QAAQ8E,QAChCoB,MAgJGlB,SAASoB,GAGRP,EAAAA,KACAC,IAAAA,KAAAA,MAAeU,EAAIC,KAAAA,KAEnBtG,KAAAA,KAAAA,MAAciG,EAASN,MAAAA,KACzBd,MAAOJ,OAmBTI,GAAUH,EAlKZ,IAmKIG,GAAe0B,EAAAA,YAlKfZ,EAmKKU,EAAAC,YACSC,SAAd1B,GAAoBJ,IAAAA,IAlKtBI,EAAOJ,IAAMI,EAAOJ,IAAMD,EAASmB,EAuKnC,IAAIY,GAAAC,EAA6BxG,EAAY6E,EAAAa,EAAAC,EAU/C,IATIY,EAAIE,KACJ5B,EAAI6B,MAAAA,EAAaD,KAGjBE,EAAAA,KAAaD,EAAAA,IApKjB9B,EAAWkB,UAAUO,EAAKxB,GAyK1B,wBAAS2B,KAA0BxG,GAAWyF,CAC5C,GAAIc,GAAAA,aAAAA,KAAAA,GAAS9B,EAAKgC,EAAA,EAAAF,EAAA7B,KAAAH,EAAAmB,EAAA,EAAAa,EAAA9B,IAAAD,EAAAmB,EAAGjB,EAAM+B,EAAA,cAAA,cArK3BE,GAAaD,EAAYL,EAAIO,GAAsBH,IAGvD,QAsKQI,GAAqB5C,EAAY1C,EAASuF,EAAAA,GAE9C,GAAIP,IACF9B,IAAIsC,EACJrC,KAAIsC,EArKR,KAuKMT,EAAM9B,UAAMoC,MAAAA,EAtKlB,IAAII,GAuKWD,EAAAA,UAAmBH,EAAAA,SAAyBA,SAAAA,EACrDN,EAAYM,EAAmBpC,EAAMoC,UAtK3C,IAAI,aAAaK,KAAKlH,GAAY,CAChC,GAAI+G,GAuKGtB,EAAAhB,IAAAwC,EAAAJ,EAAA9B,OACDoC,EAAiB1B,EAASf,IAAOuC,EAAAA,EAAAA,OAAAA,CACjCG,GAAAA,EAAkCH,IACtCV,EAAIY,IAAAA,EAAiBN,IAAAA,EACbnC,EAAOmC,EAA0BM,IAAAA,EAAAA,SAtKzCZ,EAuKO9B,IAAI2C,EAAkBP,IAAAA,EAA0BrC,OAAAwC,OArKpD,CACL,GAAIG,GAAiB1B,EAASf,KAAOuC,EAyKrCG,EAAOb,EAAAA,KAAAA,EAAAA,CAvKHY,GAAiBN,EAAmBnC,KA0K1C6B,EAASI,KAAAA,EAAqBU,KAAWC,EAC1BC,EAAYV,EAAAV,QAEzBqB,EAAOtB,KAAIoB,EAAwB5C,KAAOmC,EAAkBQ,MAAAA,GAM5DzF,MAAAA,GA3KJ,QA8KUF,GAAQb,EAAWwG,EAAAC,GA7K3B,GA8KMxD,GAAAA,EAAAA,yBAAAA,EAAAA,GA7KN0D,GAAOtB,IAAIoB,EAAe,OAAS,MAAO,IAAM,EAAIf,EAAQc,GAAa,KAAKnB,IAAIoB,EAAe,MAAQ,OAAQ,IAEnH,QA+KQ7D,KA9KN7B,aAAa6F,GACTlG,EAASmG,UAA2B,OAAfnE,IAiLnBoE,EAAU9G,WACZ8G,IA9KEjG,EAAQnB,UAkLRgD,KA9KFoE,IACFA,EAASC,WAmLXD,EAAOpG,MAMTgC,IAEEpB,EAAM0F,SAtLJtE,EAAahC,EAAS2C,SAAW,MAtgBrC,GAUIxC,MAAoCjB,EAAMkB,EAAMmG,SAAAjI,QAAA8E,UAAAzE,EAAA6H,GAAIhG,EAAMJ,EAAMqG,SAAAxG,EAAAC,QAAAC,GAPhES,EAO4EZ,EAAA0G,OAAAvG,EAAAS,OAAAT,EAAAS,MAAA+F,QAAAC,EAAAD,OAN5EtF,EAAWF,EAAQ,GAAGE,SAASwF,aAYjC7G,IAAAA,EAAS8G,OAAM3G,QAAcgB,SAAQ4F,EAAK1H,OAAS,CAGnD,GAAIc,GAAQhB,EAAOE,MAAAe,MAAA,KAAA4G,IAAAC,WACjBrG,GAAMzB,MAAQ+H,EAAKC,OAAYhH,GAZ/BjB,KAAMkB,EAAM,GAgBdQ,KAAMwG,EAAAA,IACJxG,EAAMyG,GAbVrH,EAAS8G,IAAM3G,EAAQmH,IAAMnG,EAAQ4F,KAAK,OAAS,GAC/C5G,EAAQhB,QAgBVyB,EAAM2G,MAAQL,EAAAC,YAAAhH,EAAAhB,QAbhByB,EAeMZ,YAASQ,SAAAA,GAdbI,EAAMyG,aAAa,WACjBrH,EAASwH,WAAWC,MAGxB7G,EAeMZ,MAASd,WAdb0B,EAAMyG,aAAa,WACjBrH,EAASQ,UAGbI,EAeMZ,MAASwB,WAdbZ,EAAMyG,aAAa,WACjBrH,EAASd,UAqBX0B,EAAIN,QAAAA,WAGJM,EAAI8G,aAAAA,WACA1F,EAAAA,YAGJjC,EAAQ4H,SAAK/G,EAAUgH,UAAAA,CAnBzB,IAoBIF,GACA1H,EAnBA0H,EAsBF1H,EAGE6H,EACE1H,CAtBNJ,GAuBQb,KAAMiB,SAAQd,GAtBpBqI,EAuBYvH,EAtBZH,EAAS8H,SAEX9H,EA8BQG,KAAQ4H,WACVF,EAAAA,OAAe1G,QAAAA,SAAAA,EAAAA,SA7BjBhB,EA8BOd,OACLwI,KAAAA,EAAe1H,MA7BfK,KA8BKL,EAAIA,QAKX6H,SAAAA,EAAAA,UAGAH,EAAYtJ,EACFA,QAASD,UAAQ2J,EAAU9H,WAjCrC0H,EAAe1H,EAAQ4H,UAqCnB5H,EAAc4H,YAChBnH,EAAMyG,EAAalH,EAAA4H,YAlCvBC,IACI7H,EAoCS5B,SAnCX4B,EAoCMH,OAASd,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SAlCbiB,EAAQjB,MACV0B,EAAMyG,aAAa,WACO,UAApBlH,EAAQpB,QAuChBiB,EAASkI,GAAUC,QAMjBrH,EAAAA,UArCJd,EA+CIM,QAAa,WACboB,IA9CFZ,IACAF,EAAMyF,YAERrG,EAgDUM,MAAAA,WAKRN,MApDAK,cAgDahB,GA/CbiB,EAAa,KAmDbN,EAASd,OAAOiB,EAAAd,MAAAH,UAIdgH,EAAI5H,WAAQ8J,WACFC,OAARlI,GAAqBH,EAAAA,QAlDtBG,EAAQd,MAAMH,OA8CViB,EAAQZ,QA5CjBS,EAmDQsI,KAAAA,WACJ,GAAInI,EAAQ4H,YAAW/H,EAAAmG,SAAvB,CAlDFvF,EAmDI2H,MAASV,EAAAA,YAAAA,eAAAA,GACTvJ,QAAIuJ,UAAgBW,EAAAA,eAAWlK,QAAAmC,WAAAN,EAAAkI,eAlDjClI,EAmDImI,aAAgBnH,EAjDtB,IAmDMmH,GAlDFA,CACAnI,GAmDK4H,WACLQ,EAASV,EAjDTS,EAkDAA,EAAQnH,GAAAA,UAlDA7C,QAAQ6C,QAAQ0G,EAAa,GAAGW,WAyD/BxI,OAKKkD,EAAK,KAAWC,EAAMhC,GAA0BsH,GAAS3H,IArD3EsF,EAqDoFsC,EAAYhC,OAAAC,OApDhG3E,EAAahC,EAAS2C,SAAW+E,EAAYiB,KAAKvC,EAAU,SAASwC,EAAehI,MAuDlFoB,EAAI7B,KAEJ+C,IAAI/C,UAEJgD,KAAIhD,UAKJyE,MAAI0D,OACFA,QAAMA,QA3DRI,WA4DO,WA1DLvI,EAAQ0I,WAAW7G,EAAW8G,SAAS3I,EAAQ0I,WA8DjD7I,EAASmG,MAAAA,EAAiBA,SAAWhG,EAAA4I,YAAA,IAAA5I,EAAAf,MACrC4J,EAAWpI,aAAAA,EAAAA,SAAAA,EAAAA,aAGXZ,EAKAsI,EAAIhK,MAAQ2K,GAjEZV,EAmEOW,QAAAlH,GAjEThC,EAASmG,SAAWvF,EAAMuF,UAAW,EAoEnC6C,EAAWpI,GAEXuI,EAAMC,kBAEJ9K,QAAI0D,QAAYA,OAAW2C,EApE7B0E,EAoEkCX,MAAY1G,EAAAuG,EAAAD,EAAAgB,GAG5CD,EAAIlJ,MAAQnB,EAAUuJ,EAAAD,GAAAX,KAAA2B,GAnE1BN,EAqEQhJ,GApERmJ,EAAM,WAsEApH,GAAAA,EAAAA,KApEF2G,WAAY,YAwEVvI,EAAQb,WACV8C,UAAAA,EAAAA,SArEEpC,EAASmI,QA0EfpG,OAGI5B,EAAQO,WAvEV0B,MASJpC,EA0EUM,MAAAA,WAvER,MAFAD,cA0EeG,GAzEfF,EAAa,MA2ERH,EAAQd,OAAMmB,EAAAA,MAAAA,UAKnB0F,EAAIlF,WAAAA,WACY,QAAhBhB,GAEEA,EAAKA,QAELG,EAAI7B,MAAQ8J,OAnFLpI,EAASQ,OAQpB,IAAI+I,GAgFAA,CA9EJvJ,GAkFIgB,KAAagB,SAAAA,GAIT1D,EAAQ2K,WApFdrI,EAqFIyI,MAASG,EAAMxH,YAAYrB,eAAAA,GApF3BrC,QAqFK8J,UAAAjI,EAAAsJ,eAAAnL,QAAAmC,WAAAN,EAAAsJ,eACLJ,EAAAA,aAAerH,GAGjBhC,EAAAA,EACAgJ,EAAWpI,EAGPT,QAAQnB,QAAAA,OAAYgD,EACtBE,EAAAA,MAAAA,EAAAA,GAGFmH,EAAIlJ,MAAQb,GAAa0C,KAAAA,GAvF3BhC,EAASmG,SAAWvF,EAAMuF,UAAW,EACrC6C,EAAWpI,GA2FXT,EAASQ,UAAAA,OAAAA,GACPC,IAEET,EAAQY,WAAOf,OAAAA,GAzFjBuC,MAeJvC,EA+FMA,OAASyB,SAAAA,GA9FTR,GACFA,EAAIC,iBAkGJc,EAAWmE,SA/FXnG,EAASwJ,QAmGTrJ,EAAQZ,SA9FZS,EAkGIG,MAAQT,WAjGVsC,EAAW,GAAGmG,SAEhBnI,EAqGSgC,WAAY,SAAAyF,GAGjBtH,EAAI1B,UAAY0B,GArGpBH,EAuGQ0J,YAAYC,SAAUhE,GAE1BxF,EAAIuJ,SAAWhK,GAtGnBM,EAASoJ,gBAAkB,WA4GvBpH,GAAAA,EAAAA,CAIA,GAAI4H,GAAAA,EAAkBlH,UAClBmH,EAAW7H,eACX8H,EAAY9H,EAAAA,KAAW+B,EAG3B/D,KAGAvB,EAAIiL,EAAWK,QAAAJ,EAAA,KAAAhL,EAAAF,WAhHjBuD,EAkHQgI,SAAAA,EAAmBtH,UAjH3B,IAmHIkH,GAAkBK,IAChBxL,EAAAA,EAAYwL,KAAAA,eAlHdH,EAmHW9H,EAAWiI,KAAAA,eAjH1B,IADAjK,EAmHMvB,UAAYwL,EAAAA,UAAkBF,EAAe5J,EAAAT,SAAAC,UAAAQ,EAAAT,UAlH/CgK,EAAW,CAqHX,GAAIO,GAAYA,EACdxL,EAAYA,EAAkBuB,EAAQuF,UAnHtC,UAoHSI,KAAAsE,IAAaA,EAAsBL,OAAgBhF,EAAQiF,EAAWG,OAC/EvL,EAAYA,EAAkBsL,QAAA,SAAS,OAnHhC,MAAMpE,KAAKsE,IAAsBL,EAAgB1G,IAAM4G,EAAYE,EAAiB9G,MAsH7FlB,EAAWkI,EAAYD,QAAAA,MAAmBnB,WAIxCqB,OAAAA,KAAcC,IAAoB3L,EAAWmL,KAAAA,EAAiBC,EAAUC,KAC5EO,EAAeF,EAAAA,QAAa1L,OAAAA,SAtHjB,QAAQkH,KAAKsE,IAAsBL,EAAgBhF,MAAQiF,EAAWG,EAAiBhH,QAyHpGhD,EAASiC,EAAW8H,QAAU9I,QAAAA,SAE1BjB,EAASQ,YAAAA,GAAAA,SAAAA,GAtHb,GAAI2J,GAAcC,EAAoB3L,EAAWmL,EAAiBC,EAAUC,EAC5EO,GAAeF,EAAa1L,KAE9BuB,EAyHQiB,SAAc,SAAIA,GACTqJ,KAAXnJ,EAAAA,OAAWmJ,EAAAA,WACXrJ,EAAIsJ,OAxHNtJ,EAAIsJ,oBAGRvK,EA0HQG,cAAQX,SAAAA,GAA+B0B,KAAJD,EAAIC,QAxH3CC,EAAQ,GAAGmJ,OAyHXrJ,EAAId,oBArHRH,EAuHQA,yBAAmB,SAAAiB,GACrBE,EAAQ3B,yBAtHVyB,EAAIC,iBAEFf,EAAQV,0BACVwB,EAAIsJ,kBA2HAnJ,EAAAA,SACJ9C,EAAQkM,GAAAA,OAvHRrJ,EAyHIA,GAAQG,QA3EhB,IAAIa,IAAyB,CAsM7B,OAAOnC,GAET,QAASgJ,GAAWpI,GA+LrB6J,EAAAA,SAAU7J,EAAA8J,OAAA9J,EAAA8J,MAAApE,SAAA1F,EAAA+J,UAGPC,QAAAA,GAAUC,EAAA1J,GACVP,MAAOtC,SAAA6C,SAAAA,GAAAwC,UAAAmH,iBAAAD,IAltBT,GASIE,GAAY/K,6BAA0BY,KAAST,EAAQS,UAAM+F,WAE7DpF,EAAIF,eAAsBA,GAASwF,UAAAA,EACnCvE,EAAInC,QAAQd,QAASf,EAAQ0M,SAygBjC,OAgMQC,OA9LTR,UAgMoB7J,aAAOA,UAAAA,YAAAA,OAAAA,SAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GA/L5B,OACEgK,SA+LYJ,MA9LZ5J,OA+LM,EA9LN+H,KAAM,SAAkB/H,EAAOO,EAAS4F,EAAMmE,GAkM1C,GAAIC,GACJ7M,GACEsC,MAAItC,EA/LRA,SAAQkM,SAAU,WAAY,cAAe,aAAc,eAAgB,gBAAiB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASY,GACtN9M,QAAQ8J,UAAUrB,EAAKqE,MAAOjL,EAAQiL,GAAOrE,EAAKqE,KAExD,IAmMID,GAAmBC,eAlMvB9M,SAmMQA,SAAQ8J,OAAUrB,aAAc,SAAAqE,GAClCjL,QAAQiL,UAAOxK,EAAMyK,KAAWC,EAAAA,KAAAA,EAAAA,MAlMlCnL,EAAQiL,IAAO,KAwMjB9M,QAAIA,SAAQ8J,eAAUmD,SAAa,eAAA,UAAA,SAAAH,GACjC,GAAID,GAAAA,KAAAA,EAAiBxF,OAAK4F,GAAAA,cAAaH,EAAAI,MAAA,EACrCrL,SAAQ5B,UAASwI,EAAAuE,MApMnBnL,EAqMOiL,GAAAxK,EAAAyK,MAAAtE,EAAAuE,MAlMX,IAAIC,GAAapK,EAAQ4F,KAAK,cAyM5BzI,SAAWmN,UAAAA,KACT7K,EAAc+E,KAAA4F,GAvMdpL,EAAQ5B,QAAS,EA4MjB4B,EAAI7B,OAAQ8J,GAGVxH,EAAItC,eAAkBoN,WAzM1B9K,EA0MMuI,MAAM,IAxMdpC,EAAK4E,SAAS,QAAS,SAASC,GAC9B,GAAItN,QAAQ8J,UAAUwD,KAAchL,EAAM6K,eAAe,SAAU,CACjE,GAAIC,GAAW9K,EAAMzB,KACrByB,GAAMzB,MAAQ+H,EAAKC,YAAYyE,GA4M5BD,QAASvD,UAAYsD,IACpBE,EAAAA,WACMpL,GAAAA,EAAAA,uBAtMduG,EA6MM4E,SAAIrN,WAAiBsN,SAAAA,GACnBtN,GAAQ8E,EAAOxC,UA5MnBqK,EA6MSzK,SAGPuG,EAAIzI,WA5MRsC,EA6MMuI,OAAMpC,EAAA8E,UAAA,SAAAD,EAAAF,GACJpN,QAAI2M,SAASA,GA5MjB3M,QAAQ8E,OAAOxC,EAAOgL,GA+MrBhL,EAAAzB,MAAAyM,EAID7E,QAAK+E,UAAQJ,IACf9K,EAAMmL,WACCd,GAAY3M,EAAQ8J,sBA5M1B,GAEDrB,EA+MIkE,QA9MNrK,EAAMmL,OAAOhF,EAAK+E,OAAQ,SAASF,EAAUF,GACtCT,GAAY3M,QAAQ8J,UAAUwD,KAC/BtN,QAAQ0M,SAASY,KAAWA,IAAaA,EAASI,MAAM,wBAkN1DjF,KAAgB,EAClBnG,EAAMmL,OAGJd,EAAI3M,UA9MNyI,EAkNIkE,WAjNNrK,EAAMmL,OAAOhF,EAAKxH,UAAW,SAASqM,EAAUF,GACzCT,GAAY3M,QAAQ8J,UAAUwD,KAC/BtN,QAAQ0M,SAASY,KAAWA,IAAaA,EAASI,MAAM,0BAqN1DjF,KAAe,EACjBnG,EAAMmL,YAAYrM,GAEhBuL,EAAQgB,YAAYL,MAQxBhL,EAAMsL,UACJtL,EAAIqK,OAASA,EAAAA,SAAQ/C,SAAAA,GACrB/H,GAAU7B,QAAA8J,UAAAwD,IACVX,EAAUgB,YAAAL,KArNdX,EAAUjL,EAASmB,EAAShB,GAC5BS,EAAMsL,IAAI,WAAY,WAChBjB,GAASA,EAAQ/C,UACrB/H,EAAU,KACV8K,EAAU","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          /*****************************************************************************************\n           * BLOVE 2020-08-06: removed this from GradeCam's custom build because\n           * \"exotically placed\" datepickers (bottom-left) were flying off the bottom\n           * of the screen frequently, esp. on small devices. By letting it continue,\n           * this proceeds to calculate the viewport width and adjust the top position\n           * to keep the bottom on-screen.\n           * The primary side effect we have noticed so far is that it allows these\n           * tooltips / datepickres to pop up and mask the element they are anchored\n           * to, which seems like an acceptable compromise.\n           ****************************************************************************************/\n          // if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}